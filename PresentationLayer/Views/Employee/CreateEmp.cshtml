@model PresentationLayer.Models.Employee

@{
    ViewBag.Title = "CreateEmp";
}

<h2>Create Employee</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JoiningDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.JoiningDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JoiningDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.RadioButton("rbGrp", "1", isChecked: true)@Html.Label("Male")
                @Html.RadioButton("rbGrp", "2", isChecked: false)@Html.Label("Female")
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CountryId, Model.CountryList, new { @class = "form-control select2-allow-clear",id="Country", @onchange = "FillState()" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.StateId,new SelectList(Enumerable.Empty<SelectListItem>(),"StateId","StateName"),"Select State", new { @class = "form-control select2-allow-clear",id ="State", @onchange = "FillCity()" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CityId, new SelectList(Enumerable.Empty<SelectListItem>(), "CityId", "CityName"), "Select State", new { @class = "form-control select2-allow-clear" ,id="City"})
                @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<script type="text/javascript">

    function CreateValue() {
        var date = $('#JoiningDate').val();
        if ($("#Country").val() == null) {
            $("#Country").val() = 0;
        }

        var postData = {
            "EmployeeId": $("#EmployeeId").val(),
            "EmployeeName": $("#EmployeeName").val(),
            "JoiningDate": $('#JoiningDate').val(),
            "Designation": $("#Designation").val(),
            "Gender": $('[name="rbGrp"]:checked').val(),
            "Details": $("#Details").val(),
            "CityId": $("#City").val(),
            "StateId": $("#State").val(),
            "CountryId": $("#Country").val(),
        };
        $.ajax({
            url: '/Employee/CreateEmp',
            type: "POST",
            data: JSON.stringify(postData),
            contentType: "application/json",
            dataType: 'json',
            async: true,
            success: function (result) { window.location.reload(); }
        });
    }

</script>
<script language="javascript" type="text/javascript">

    function FillState() {
        var countryId = $('#Country').val();
        var obj = { CountryId: countryId };
        console.log(countryId);
        console.log(obj);
        var url = "/Employee/GetStateByCountryId";
        console.log(url);
        if (countryId > 0) {
            $.ajax({
                url: url,
                type: "POST",
                datatype: 'application/json',
                contentType: 'application/json',
                data: JSON.stringify(obj),
                success: function (states) {
                    states = JSON.parse(states);

                    if (states.length > 0) {
                        $("#State").html(""); // clear before appending new list
                        var options = '';
                        options += '<option value="Select">Select</option>';
                        for (var i = 0; i < states.length; i++) {
                            options += '<option value="' + states[i].StateId + '">' + states[i].StateName + '</option>';
                        }
                        $('#State').append(options);



                    }
                },
            });
        }
        else {

        }
    }
</script>

<script language="javascript" type="text/javascript">

    function FillCity() {
        var stateId = $('#State').val();
        var obj = { StateId: stateId };
        console.log(stateId);
        console.log(obj);
        var url = "/Employee/GetCityByStateId";
        if (stateId > 0) {
            $.ajax({
                url: url,
                type: "POST",
                datatype: 'application/json',
                contentType: 'application/json',
                data: JSON.stringify(obj),
                success: function (cities) {
                    cities = JSON.parse(cities);
                    console.log(cities);
                    if (cities.length > 0) {
                        $("#City").html("");
                        var options = '';
                        options += '<option value="Select">Select</option>';
                        for (var i = 0; i < cities.length; i++) {
                            options += '<option value="' + cities[i].CityId + '">' + cities[i].CityName + '</option>';
                        }
                        $('#City').append(options);
                    }
                }
            });
        }
    }
</script>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>